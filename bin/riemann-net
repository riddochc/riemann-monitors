#!/usr/bin/env ruby

# Gathers network interface statistics and submits them to Riemann.

require "pry"
require_relative "../lib/riemann-monitors"
require 'set'

class Riemann::Monitors::Net
  include Riemann::Monitors

  opt :interfaces, "Interfaces to monitor", :type => :strings, :default => []
  opt :ignore_interfaces, "Interfaces to ignore", :type => :strings, :default =>['lo']

  def initialize
    @old_state = nil
    @fields = ["rx bytes", "rx packets", "rx errs", "rx drop", "rx fifo", "rx frame", "rx compressed", "rx multicast",
               "tx bytes", "tx packets", "tx errs", "tx drops", "tx fifo", "tx colls", "tx carrier", "tx compressed"]
    @use_interfaces = Set.new(opts[:interfaces])
    @ignore_interfaces = Set.new(opts[:ignore_interfaces])
  end

  def state
    net = File.open("/proc/net/dev", "r")
    net.readline ; net.readline  # Skip first two lines.

    metrics = {}
    net.readlines.each do |line|
      interface = line[/^[^:]+/]
      if @use_interfaces.include?(interface) && !@ignore_interfaces.include?(interface)
        metrics[interface] = @fields.zip(line.split(/\s+/).drop(1).map(&:to_i)).to_h
      end
    end
    metrics
  end

  # TODO
  def tick
    state = self.state

    if @old_state
      # Report services from `@old_state` that don't exist in `state` as expired
      @old_state.reject { |k| state.has_key?(k) }.each do |service, metric|
        report(:service => service.dup, :state => 'expired')
      end

      # Report delta for services that have values in both `@old_state` and `state`
      state.each do |service, metric|
        next unless @old_state.has_key?(service)

        delta = metric - @old_state[service]
        svc_state = case service
          when /drop$/
            if metric > 0
              'warning'
            else
              'ok'
            end
          when /errs$/
            if metric > 0
              'warning'
            else
              'ok'
            end
          else
            'ok'
          end

        report(
          :service => service.dup,
          :metric => (delta.to_f / opts[:interval]),
          :state => svc_state
        )
      end
    end

    @old_state = state
  end
end
  
Riemann::Monitors::Net.run
